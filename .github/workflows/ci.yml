name: UiPath CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: windows-latest

    steps:
    - name: üì¶ Checkout code
      uses: actions/checkout@v4

    # √âtape 1 : T√©l√©charger et d√©compresser UiPath CLI
    - name: üîß Download and Setup UiPath CLI
      shell: powershell
      run: |
        Write-Host "T√©l√©chargement de l‚ÄôUiPath CLI depuis GitHub..."
        Invoke-WebRequest -Uri "https://github.com/UiPath/uipathcli/releases/latest/download/uipathcli-windows-amd64.zip" -OutFile uipcli.zip
        Write-Host "D√©compression du package CLI..."
        Expand-Archive -Path uipcli.zip -DestinationPath uipcli
        # Ajouter le dossier uipcli au PATH pour simplifier les appels
        echo "$((Get-Location).Path)\uipcli" | Out-File -Append -Encoding ascii $env:GITHUB_PATH

    # √âtape 2 : Installer les packages NuGet requis par le projet
    - name: üì• Restore NuGet packages
      shell: powershell
      run: |
        Write-Host "Restauration des packages NuGet..."
        # Installer nuget.exe si pas d√©j√† pr√©sent
        if (-not (Test-Path nuget.exe)) {
          Invoke-WebRequest -Uri "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe" -OutFile "nuget.exe"
        }
        # Restaurer les packages √† partir du fichier project.json
        .\nuget.exe restore project.json

    # √âtape 3 : V√©rifier la version de la CLI (optionnel, pour debug)
    - name: ‚úÖ Check UiPath CLI version
      run: uipath.exe version
      working-directory: ./uipcli

    # √âtape 4 : Packager le projet UiPath
    - name: üìÅ Pack UiPath Project
      run: uipath.exe project pack --input-folder . --output-folder ./output
      working-directory: ./uipcli

    # √âtape 5 : Pousser le package vers Orchestrator
    - name: üîê Authenticate to UiPath Orchestrator
      shell: cmd
      run: |
        uipath.exe login ^
          --client-id "${{ secrets.UIPATH_CLIENT_ID }}" ^
          --client-secret "${{ secrets.UIPATH_CLIENT_SECRET }}" ^
          --account-name "${{ secrets.UIPATH_ACCOUNT_LOGICAL_NAME }}" ^
          --tenant "${{ secrets.UIPATH_TENANT }}" ^
          --url "${{ secrets.UIPATH_ORCHESTRATOR_URL }}"
      working-directory: ./uipcli

    - name: üöÄ Push Package to Orchestrator
      run: uipath.exe push ./output/*.nupkg
      working-directory: ./uipcli

    # √âtape 6 : Upload du package comme artefact GitHub (optionnel)
    - name: ‚òÅÔ∏è Upload Package as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: uipath-package
        path: ./output/*.nupkg
